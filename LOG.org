#+TITLE:	BTC Rates
#+SUBTITLE:	Log
#+DATE:		2024-11-27 08:13:57-05:00
#+LASTMOD: 2025-05-07 10:07:48-0400 (EDT)
#+OPTIONS:	toc:nil num:nil
#+STARTUP:	indent show3levels
#+CATEGORIES[]:	Projects
#+TAGS[]:	log python sql bitcoin blockchain yahoofinance

* Wednesday, May 7, 2025
** YFInance Too Many Requests Error
- Replacing ~requests~ with ~curl_cffi.requests~ and ~Sessiom()~ with ~Session(impersonate=chrome)~ fixed this
- Ref: [[https://github.com/ranaroussi/yfinance/issues/2422#issuecomment-2840774505][GitHub Issue]]
* Saturday, March 15, 2025
** 'TypeError' While Retrieving Last Price & Date
- Program: ~btc_rates4~
- Affected symbols: BCH-USD and BTC-USD
- Whatever PostgreSQL returned, it triggered a TypeError
- Re-running ~btc_rates4~ resolved the issue (expected data was in database)
* Friday, March 14, 2025
** Wait for Login Processes to Complete
- On a slower computer, ~btc_rates4~ throws network errors if run too soon after logging-in
- Using ~psutil.users[0].started~ to retrieve login time, assuming that the first user is the current user
* Friday, February 21, 2025
** Changes in YFinance
*** YF.download()
- ~auto_adjust~ option changed default value from ~False~ to ~True~
- Program output now includes a notification of the change
- Added ~auto_adjust=True~ parameter ~YF.download()~ calls
* Thursday, February 20, 2025
** Rate Limiting Error from Yahoo! Finance
- This started two or three days ago
- Solutions from last year didn't work (ie. pass User-Agent in request header)
- The ~yfinance~ Python package has been updated and appears to have resolved the issue
** Code Changes
*** ~btc_rates4~
**** Additions
- Request sessions
- Query for First Trading Date
* Tuesday, February 18, 2025
** Adding Statistics to ~btc_rates4~ Output
- I thought it would be easier to collect data from YFinance
** Exploring YFinance Features
*** ticker()
**** info()
- Company information, including price statistics
**** fastinfo()
- Brief company information, including price statistics; some of the averages are different than what ~info()~ returns
**** news()
- This looks intriguing, and has me wondering about which tickers I want to track
** Limitations of Exchange Calendars Package
*** Open/Close Dates
- This was causing errrors when new ticker symbols were added that began trading more than 20 years ago (ie. AAPL)
- Defaults to 20 years ago, can be overridden by setting ~GLOBAL_DEFAULT_START~
  #+begin_example python
  xcals.exchange_calendar.GLOBAL_DEFAULT_START = pd.Timestamp("1970-01-01")
  #+end_example
* Friday, January 10, 2025
** Extra Data from Yahoo! Finance (YF)
- YF is returning TSLA data for two days ago, instead of yesterday
- Added a date filter to remove unwanted data from YF results
* Sunday, December 22, 2024
- ~btc_rates4~ ran with no errors--rescheduling for 02:00 seems to be the easiest way to fix it
* Friday, December 20, 2024
** Issues with ~btc_rates4~
*** Retry Loop
- At 03:15, the 8th retry loop had begun
  * Running a new instance got the data
  * Terminated scheduled instance
- I can't see why the retry loop isn't working
- If this persists, I will reschedule to 02:00 and change the loop to re-process tickers with missing data, after going through the entire list of tickers
** Changes to ~btc_rates4~
*** Retry Loop
- Removed microseconds from log messages for improved readability
- Added details to log messages
- Re-initialized DataFrame before each retry
* Thursday, December 19, 2024
** Changes
- Rescheduled ~btc_rates4~ to run at 01:00, instead of at midnight
- Replaced ~sleep_until()~ function with ~sleeper()~, and removed call from ~init()~
- Added retry loop that adds between three and five minutes to the sleep timer; with ten retries, it could sleep between 30 and 50 minutes if it reaches the last retry
- Using a ~for-else~ construct in order to throw an exception if the maximum number of retries is reached
* Wednesday, December 18, 2024
- Increased "midnight delay" to 15 minutes
- ~BTC-CAD~ is okay, but it seems that data for ~BTC-USD~ is still unavailable at 00:15
* Tuesday, December 17, 2024
- Increased "midnight delay" to ten minutes
* Monday, December 16, 2024
** Issues
*** No Data at Midnight
- Evidently, YFinance needs a few minutes to get the previous day's data
- Added ~sleep_until()~ function that waits until five minutes after midnight, when necessary
* Sunday, December 15, 2024
** Issues
*** YFinance Returning Extra Data
**** Details
- *Symbol:* TSLA
- *Date Range:* yesterday and today
- *Markets Open/Closed:* closed (program says markets were open)
- *Results:* data for two days ago
**** Cause
- My ~date_list()~ generator returned an empty list when the date range was a single day
- Default value for markets open flag is "open" (~was_open == True~)
**** Solution
- Add logic to ~date_list()~ to handle a date range of one day
* Saturday, December 14, 2024
** Issues
*** XDG Runtime Directory
- ~XDG_RUNTIME_DIR~ seems to be unavailable to cron jobs
- It can be specified in ~~/.crontab~
** Deployment
1. Used ~pg_dump -t btc_rates.dt_yahoo_daily --data-only~ to export data
2. Dropped the ~btc_rates~ schema from the database
3. Ran ~sqitch deploy~ to "officially" create the database
4. Restored the data with ~xzcat yt_yahoo_daily.sql.xz | psql~
* Friday, December 13, 2024
** Program Changes
- Retired ~btc_rates~ on local machine (still running on VPS)
- ~btc_rates4~ is the main program, until I completely retire ~btc_rates~
- Upgraded ~btc-rates-daily.sh~ to work with the database
** Jupyter Notebooks
- Much of my research is in the ~notebooks~ directory
** Charts & Graphs
- I have been playing with ~matplotlib~ in Jupyter notebooks
- I haven't decided on what it is that I might want to chart
* Monday, December 9, 2024
** New Polling Program
*** Features
**** Data Provider: Yahoo! Finance
- This is a Python package (~yfinance~) that shares data scraped from Yahoo! Finance (it isn't an actual API)
- The following alternatives to Yahoo! Finance don't seem to offer better results:
  * [[https://alphavantage.co][AlphaVantage]]
  * [[https://apiverse.com][ApiVerse]]
  * [[https://marketstack.com][MarketStack]]
  * [[https://polygon.io][Polygon]]
**** Database: PostgreSQL
- Limiting data collection to daily data
- Have collected entire available price history (since 2014)
* Monday, December 2, 2024
** Remote Database Connections
#+begin_example shell
ssh -f -N -L 6333:localhost:5432 vps
psql postgresql://localhost:6333
#+end_example
*** Copy price table
#+begin_example shell
pg_dump -t btc_rates.dt_price --data-only | psql postgresql://localhost:6333
#+end_example
** XDG Directories
*** New: ~XDG_STATE_HOME~
- Default: ~$HOME/.local/state~
- Purpose: Program state, logs, history, current cursor/reading position, etc.
* Sunday, December 1, 2024
** New Version of Polling Program
- ~btc_rates~ was my initial project with the ~blockchain~ library
- After five years, it is time to modernize
*** New Features
- ~loguru~ for logging
- Integrate with database
* Saturday, November 30, 2024
** Adding a PostgreSQL Database
- PostgreSQL provides a much better way to query the database
** Database Version Control: Sqitch
- This has become my preferred tool (over SQLAlchemy)

* Wednesday, November 27, 2024
- With Bitcoin prices on the rise, I working on this project, again
** Adding Reports
*** Adding SQLite Database
- A SQLite database seems the fastest way to produce summary reports (ie. weekly, monthly, etc.)

* Thursday, December 9, 2021
- Added "retry" loop


* Monday, December 6, 2021
- Blew the dust off of this project...
- Added logging facility
- After fiddling with the sleep timer, I opted to just use fcron

